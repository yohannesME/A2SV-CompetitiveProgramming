class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        rowMap = [set() for i in range(9)]
        columnMap = [set() for i in range(9)]
        boxMap = [set() for i in range(9)]
        for row in range(9):
            for column in range(9):
                if board[row][column] != '.':
                    rowMap[row].add(board[row][column])
                    columnMap[column].add(board[row][column])
        #iterate through the sub box
        index = -1
        for row in range(3):
            for column in range(3):
                index += 1
                #sub box
                for subrow in range(3):
                    for subcolumn in range(3):
                        if board[subrow+row*3][subcolumn+column*3] != '.':
                            boxMap[index].add(board[subrow+row*3][subcolumn+column*3])
        
        def backtrack( row=0, col=0):
            if col == 9:
                return backtrack(row+1, 0)   
            
            if row == 9:
                return True

            for number in range(1, 10):
                if board[row][col] == '.':

                    if str(number) not in (rowMap[row] | columnMap[col] | boxMap[(row//3)*3+col//3]):
                        rowMap[row].add(str(number))
                        columnMap[col].add(str(number))
                        boxMap[(row//3)*3+col//3].add(str(number))
                        board[row][col] = str(str(number))

                        if backtrack(row, col+1):
                            return True

                        rowMap[row].remove(str(number))
                        columnMap[col].remove(str(number))
                        boxMap[(row//3)*3+col//3].remove(str(number))
                        board[row][col] = '.'
                else:
                    return backtrack(row, col+1)
            
            return False

                
        backtrack(0,0)